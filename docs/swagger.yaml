definitions:
  api.MultipleDataResp-food_Food:
    properties:
      data:
        items:
          $ref: '#/definitions/food.Food'
        type: array
        x-order: "2"
      message:
        type: string
        x-order: "1"
      pagination:
        allOf:
        - $ref: '#/definitions/api.Pagination'
        x-order: "2"
    required:
    - data
    - message
    - pagination
    type: object
  api.MultipleDataResp-location_Location:
    properties:
      data:
        items:
          $ref: '#/definitions/location.Location'
        type: array
        x-order: "2"
      message:
        type: string
        x-order: "1"
      pagination:
        allOf:
        - $ref: '#/definitions/api.Pagination'
        x-order: "2"
    required:
    - data
    - message
    - pagination
    type: object
  api.MultipleDataResp-owner_Owner:
    properties:
      data:
        items:
          $ref: '#/definitions/owner.Owner'
        type: array
        x-order: "2"
      message:
        type: string
        x-order: "1"
      pagination:
        allOf:
        - $ref: '#/definitions/api.Pagination'
        x-order: "2"
    required:
    - data
    - message
    - pagination
    type: object
  api.Pagination:
    properties:
      page:
        type: integer
        x-order: "1"
      pageSize:
        type: integer
        x-order: "2"
      totalItem:
        type: integer
        x-order: "4"
      totalPage:
        type: integer
        x-order: "3"
    required:
    - page
    - pageSize
    - totalItem
    - totalPage
    type: object
  api.SingleDataResp-food_AddFood:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/food.AddFood'
        x-order: "2"
      message:
        type: string
        x-order: "1"
    required:
    - data
    - message
    type: object
  api.SingleDataResp-food_Food:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/food.Food'
        x-order: "2"
      message:
        type: string
        x-order: "1"
    required:
    - data
    - message
    type: object
  api.SingleDataResp-location_Location:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/location.Location'
        x-order: "2"
      message:
        type: string
        x-order: "1"
    required:
    - data
    - message
    type: object
  api.SingleDataResp-owner_Owner:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/owner.Owner'
        x-order: "2"
      message:
        type: string
        x-order: "1"
    required:
    - data
    - message
    type: object
  api.SingleDataResp-user_UserLogin:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/user.UserLogin'
        x-order: "2"
      message:
        type: string
        x-order: "1"
    required:
    - data
    - message
    type: object
  api.SingleDataResp-user_UserRegister:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/user.UserRegister'
        x-order: "2"
      message:
        type: string
        x-order: "1"
    required:
    - data
    - message
    type: object
  food.AddFood:
    properties:
      createdAt:
        type: string
        x-order: "10"
      description:
        type: string
        x-order: "7"
      id:
        type: string
        x-order: "1"
      images:
        type: string
        x-order: "5"
      locationId:
        type: string
        x-order: "4"
      name:
        type: string
        x-order: "6"
      ownerId:
        type: string
        x-order: "3"
      price:
        type: integer
        x-order: "8"
      review:
        type: string
        x-order: "9"
      updatedAt:
        type: string
        x-order: "11"
      userId:
        type: string
        x-order: "2"
    required:
    - createdAt
    - description
    - id
    - images
    - locationId
    - name
    - ownerId
    - price
    - review
    - updatedAt
    - userId
    type: object
  food.AddReq:
    properties:
      description:
        type: string
        x-order: "6"
      images:
        type: string
        x-order: "4"
      locationId:
        type: string
        x-order: "3"
      name:
        type: string
        x-order: "5"
      ownerId:
        type: string
        x-order: "2"
      price:
        type: integer
        x-order: "7"
      review:
        type: string
        x-order: "8"
      userId:
        type: string
        x-order: "1"
    required:
    - description
    - images
    - locationId
    - name
    - ownerId
    - price
    - review
    - userId
    type: object
  food.Food:
    properties:
      createdAt:
        type: string
        x-order: "10"
      description:
        type: string
        x-order: "7"
      id:
        type: string
        x-order: "1"
      images:
        type: string
        x-order: "5"
      location:
        type: string
        x-order: "4"
      name:
        type: string
        x-order: "6"
      ownername:
        type: string
        x-order: "3"
      price:
        type: integer
        x-order: "8"
      review:
        type: string
        x-order: "9"
      updatedAt:
        type: string
        x-order: "11"
      username:
        type: string
        x-order: "2"
    required:
    - createdAt
    - description
    - id
    - images
    - location
    - name
    - ownername
    - price
    - review
    - updatedAt
    - username
    type: object
  food.UpdateReq:
    properties:
      description:
        type: string
        x-order: "6"
      images:
        type: string
        x-order: "4"
      locationId:
        type: string
        x-order: "3"
      name:
        type: string
        x-order: "5"
      ownerId:
        type: string
        x-order: "2"
      price:
        type: integer
        x-order: "7"
      review:
        type: string
        x-order: "8"
      userId:
        type: string
        x-order: "1"
    required:
    - description
    - images
    - locationId
    - name
    - ownerId
    - price
    - review
    - userId
    type: object
  location.AddReq:
    properties:
      city:
        type: string
        x-order: "2"
      details:
        type: string
        x-order: "5"
      district:
        type: string
        x-order: "1"
      postalCode:
        type: string
        x-order: "4"
      province:
        type: string
        x-order: "3"
    required:
    - city
    - details
    - district
    - postalCode
    - province
    type: object
  location.Location:
    properties:
      city:
        type: string
        x-order: "3"
      createdAt:
        type: string
        x-order: "7"
      details:
        type: string
        x-order: "6"
      district:
        type: string
        x-order: "2"
      id:
        type: string
        x-order: "1"
      postalCode:
        type: string
        x-order: "5"
      province:
        type: string
        x-order: "4"
      updatedAt:
        type: string
        x-order: "8"
    required:
    - city
    - createdAt
    - details
    - district
    - id
    - postalCode
    - province
    - updatedAt
    type: object
  location.UpdateReq:
    properties:
      city:
        type: string
        x-order: "2"
      details:
        type: string
        x-order: "5"
      district:
        type: string
        x-order: "1"
      postalCode:
        type: string
        x-order: "4"
      province:
        type: string
        x-order: "3"
    type: object
  owner.AddReq:
    properties:
      images:
        type: string
        x-order: "1"
      name:
        type: string
        x-order: "2"
    required:
    - images
    - name
    type: object
  owner.Owner:
    properties:
      createdAt:
        type: string
        x-order: "4"
      id:
        type: string
        x-order: "1"
      images:
        type: string
        x-order: "2"
      name:
        type: string
        x-order: "3"
      updatedAt:
        type: string
        x-order: "5"
    required:
    - createdAt
    - id
    - images
    - name
    - updatedAt
    type: object
  owner.UpdateReq:
    properties:
      images:
        type: string
        x-order: "1"
      name:
        type: string
        x-order: "2"
    type: object
  user.UserLogin:
    properties:
      id:
        type: string
        x-order: "1"
      password:
        type: string
        x-order: "3"
      username:
        type: string
        x-order: "2"
    required:
    - id
    - password
    - username
    type: object
  user.UserLoginReq:
    properties:
      password:
        type: string
        x-order: "2"
      username:
        type: string
        x-order: "1"
    required:
    - password
    - username
    type: object
  user.UserRegister:
    properties:
      createdAt:
        type: string
        x-order: "6"
      email:
        type: string
        x-order: "4"
      fullname:
        type: string
        x-order: "5"
      id:
        type: string
        x-order: "1"
      profilePicture:
        type: string
        x-order: "2"
      updatedAt:
        type: string
        x-order: "7"
      username:
        type: string
        x-order: "3"
    required:
    - createdAt
    - email
    - fullname
    - id
    - profilePicture
    - updatedAt
    - username
    type: object
  user.UserRegisterReq:
    properties:
      confirmPassword:
        type: string
        x-order: "3"
      email:
        type: string
        x-order: "5"
      fullname:
        type: string
        x-order: "6"
      password:
        type: string
        x-order: "2"
      profilePicture:
        type: string
        x-order: "4"
      username:
        type: string
        x-order: "1"
    required:
    - confirmPassword
    - email
    - fullname
    - password
    - profilePicture
    - username
    type: object
info:
  contact: {}
paths:
  /foods:
    get:
      consumes:
      - application/json
      description: Get all foods
      parameters:
      - default: 15
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 1
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.MultipleDataResp-food_Food'
      security:
      - BearerAuth: []
      summary: Get all foods
      tags:
      - foods
    post:
      consumes:
      - application/json
      description: Add new food
      parameters:
      - description: Add request
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/food.AddReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-food_AddFood'
      security:
      - BearerAuth: []
      summary: Add new food
      tags:
      - foods
  /foods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete food by id
      parameters:
      - description: food id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-food_Food'
      security:
      - BearerAuth: []
      summary: Delete food by id
      tags:
      - foods
    get:
      consumes:
      - application/json
      description: Get food by id
      parameters:
      - description: food id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-food_Food'
      security:
      - BearerAuth: []
      summary: Get food by id
      tags:
      - foods
    patch:
      consumes:
      - application/json
      description: Update food by id
      parameters:
      - description: food id
        in: path
        name: id
        required: true
        type: string
      - description: Update request
        in: body
        name: food
        required: true
        schema:
          $ref: '#/definitions/food.UpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-food_Food'
      security:
      - BearerAuth: []
      summary: Update food by id
      tags:
      - foods
  /locations:
    get:
      consumes:
      - application/json
      description: Get all locations
      parameters:
      - default: 15
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      - default: 1
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.MultipleDataResp-location_Location'
      security:
      - BearerAuth: []
      summary: Get all locations
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Add new location
      parameters:
      - description: Add request
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/location.AddReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-location_Location'
      summary: Add new location
      tags:
      - locations
  /locations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete location by id
      parameters:
      - description: location id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-location_Location'
      security:
      - BearerAuth: []
      summary: Delete location by id
      tags:
      - locations
    get:
      consumes:
      - application/json
      description: Get location by id
      parameters:
      - description: location id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-location_Location'
      security:
      - BearerAuth: []
      summary: Get location by id
      tags:
      - locations
    patch:
      consumes:
      - application/json
      description: Update location by id
      parameters:
      - description: location id
        in: path
        name: id
        required: true
        type: string
      - description: Update request
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/location.UpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-location_Location'
      security:
      - BearerAuth: []
      summary: Update location by id
      tags:
      - locations
  /owners:
    get:
      consumes:
      - application/json
      description: Get all owners
      parameters:
      - default: 1
        description: offset
        in: query
        name: offset
        required: true
        type: integer
      - default: 15
        description: limit
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.MultipleDataResp-owner_Owner'
      security:
      - BearerAuth: []
      summary: Get all owners
      tags:
      - owners
    post:
      consumes:
      - application/json
      description: Add new owner
      parameters:
      - description: Add request
        in: body
        name: owner
        required: true
        schema:
          $ref: '#/definitions/owner.AddReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-owner_Owner'
      summary: Add new owner
      tags:
      - owners
  /owners/{id}:
    delete:
      consumes:
      - application/json
      description: Delete owner by id
      parameters:
      - description: owner id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-owner_Owner'
      security:
      - BearerAuth: []
      summary: Delete owner by id
      tags:
      - owners
    get:
      consumes:
      - application/json
      description: Get owner by id
      parameters:
      - description: owner id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-owner_Owner'
      security:
      - BearerAuth: []
      summary: Get owner by id
      tags:
      - owners
    patch:
      consumes:
      - application/json
      description: Update owner by id
      parameters:
      - description: owner id
        in: path
        name: id
        required: true
        type: string
      - description: Update request
        in: body
        name: owner
        required: true
        schema:
          $ref: '#/definitions/owner.UpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-owner_Owner'
      security:
      - BearerAuth: []
      summary: Update owner by id
      tags:
      - owners
  /users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login user request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-user_UserLogin'
      security:
      - BearerAuth: []
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register user request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserRegisterReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SingleDataResp-user_UserRegister'
      security:
      - BearerAuth: []
      summary: Register user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
